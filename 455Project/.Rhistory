females = teengamb[teengamb$sex == 1,]
mmean = weighted.mean(males$gamble)
fmean = weighted.mean(females$gamble)
mvar = var(males$gamble)
fvar = var(females$gamble)
png("C:/Users/alexander/Documents/GitHub/regressions/expenses.png")
p = ggplot(teengamb) + geom_point(aes(sex,gamble,shape=sex,color=sex,fill=sex)) + scale_shape_identity()
p + annotate("text",x=.5,y=75,label = "Variance and expected values for men gambling\n is much higher than woman, study shows") +labs(x="gender",y="pounds gambled per week")
#plot(gamble~sex,teengamb,pch=c(10,20)[(teengamb$sex)],col=c("orange","green")[(teengamb$sex)])
#legend("topleft",legend = teengamb$sex[!duplicated(teengamb$sex)],col=c("orange","green"),pch=c(10,20))
dev.off()
lTG<-lm(gamble ~ sex + status + income + verbal, teengamb)
summary(lTG)
rTG = residuals(lTG)
mTG = max(rTG)
which(rTG==mTG)
weighted.mean(rTG)
fTG = fitted(lTG)
var(rTG,fTG)
var(rTG,teengamb$income)
print(mmean-fmean)
usModel <- lm(wage~educ+exper,uswages)
usLModel <- lm(log(wage)~educ+exper,uswages)
summary(usModel)
summary(usLModel)
vars = names(prostate)
prostateModel = lm(lpsa~lcavol,prostate)
tempS=summary(prostateModel)
rVals = double()
rSE = double()
for( nam in vars)
{
prostateModel = update(prostateModel, as.formula(paste('~ . +', nam)))
tempS = (summary(prostateModel))
print(tempS$r.squared)
rVals=append(rVals, c(tempS$r.squared))
rSE=append(rSE,tempS$sigma)
}
#need to remove the last elements
rVals = head(rVals,-1)
rSE = head(rSE,-1)
png("C:/Users/alexander/Documents/GitHub/regressions/rVals.png")
qplot(1:8,rVals)
dev.off()
#png("C:/Users/BDVR/Documents/Spring2018/regressions/hw3/rSE.png")
png("C:/Users/alexander/Documents/GitHub/regressions/rSE.png")
qplot(1:8,rSE)
dev.off()
cheeseModel = lm(taste~Acetic + H2S + Lactic, cheddar)
summary(cheeseModel)
cheeseFit = fitted(cheeseModel)
actual = cheddar$taste
corrCheese = cor(actual,cheeseFit)
print(corrCheese^2)
cheeseModelNoInt = lm(taste~Acetic + H2S + Lactic+0, cheddar)
summary(cheeseModelNoInt)
CF = fitted(cheeseModelNoInt)
print(cor(actual,CF)^2)
qrc = qr(cheeseModel)
qrCC = t(qr.Q(qrc)) %*% actual
backsolve(qr.R(qrc),qrCC)
View(males)
mmean = weighted.mean(males$gamble)
fmean = weighted.mean(females$gamble)
mvar = var(males$gamble)
fvar = var(females$gamble)
mmean
fmean
mvar
fvar
lTG<-lm(gamble ~ sex + status + income + verbal, teengamb)
summary(lTG)
rTG = residuals(lTG)
mTG = max(rTG)
which(rTG==mTG)
mtg
mTG
weighted.mean(rTG)
var(rTG,fTG)
var(rTG,teengamb$income)
print(mmean-fmean)
usModel <- lm(wage~educ+exper,uswages)
usLModel <- lm(log(wage)~educ+exper,uswages)
summary(usModel)
summary(usLModel)
prostateModel = lm(lpsa~lcavol,prostate)
tempS=summary(prostateModel)
rVals = double()
rSE = double()
for( nam in vars)
{
prostateModel = update(prostateModel, as.formula(paste('~ . +', nam)))
tempS = (summary(prostateModel))
print(tempS$r.squared)
rVals=append(rVals, c(tempS$r.squared))
rSE=append(rSE,tempS$sigma)
}
#need to remove the last elements
rVals = head(rVals,-1)
rSE = head(rSE,-1)
png("C:/Users/alexander/Documents/GitHub/regressions/rVals.png")
qplot(1:8,rVals)
dev.off()
cheeseModel = lm(taste~Acetic + H2S + Lactic, cheddar)
summary(cheeseModel)
cheeseFit = fitted(cheeseModel)
actual = cheddar$taste
corrCheese = cor(actual,cheeseFit)
print(corrCheese^2)
cheeseModelNoInt = lm(taste~Acetic + H2S + Lactic+0, cheddar)
summary(cheeseModelNoInt)
CF = fitted(cheeseModelNoInt)
print(cor(actual,CF)^2)
qrc = qr(cheeseModel)
qrCC = t(qr.Q(qrc)) %*% actual
backsolve(qr.R(qrc),qrCC)
?pf
data(cheddar)
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheddar
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheeseMod = lm(taste~acetic+H2s+Lactic,cheddar)
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheeseMod = lm(taste~Acetic+H2s+Lactic,cheddar)
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheeseMod = lm(taste~Acetic+H2S+Lactic,cheddar)
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheeseMod = lm(taste~Acetic+H2S+Lactic,cheddar)
summary(cheeseMod)
?data(cheddar)
?cheddar
?exp
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheeseMod = lm(taste~Acetic+H2S+Lactic,cheddar)
summary(cheeseMod)
cheeseModP = lm(taste~exp(Acetic)+exp(H2S)+Lactic,cheddar)
summary(cheeseModP)
anova(cheeseMod,cheeseModP)
anova(cheeseMod,cheeseModP)$f
anova(cheeseMod,cheeseModP)$Pr(>F)
anova(cheeseMod,cheeseModP)$
.
anova(cheeseMod,cheeseModP)[0]
anova(cheeseMod,cheeseModP)[1]
anova(cheeseMod,cheeseModP)[2]
anova(cheeseMod,cheeseModP)[3]
anova(cheeseMod,cheeseModP)[4]
anova(cheeseMod,cheeseModP)[5]
anova(cheeseMod,cheeseModP)[6]
log(10.10)
log(10,10)
log(10.01,10)
log(100.01,10)
log(100,10)
log(2.17)
log(2.71)
log(10)
log(10.01)
log(10.01)/log(10)
data(sat)
sat
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
data(cheddar)
cheeseMod = lm(taste~Acetic+H2S+Lactic,cheddar)
summary(cheeseMod)
cheeseModP = lm(taste~exp(Acetic)+exp(H2S)+Lactic,cheddar)
summary(cheeseModP)
anova(cheeseMod,cheeseModP)
data(sat)
scores = lm(total~expend+ratio+salary,sat)
scoresSZ = lm(total~expend+ratio,sat)
scoresNull=lm(total~1)
anova(scores,scoresSZ)
anova(scores,scoresNull)
sat
scores = lm(total~expend+ratio+salary,sat)
scoresSZ = lm(total~expend+ratio,sat)
scoresNull=lm(total~1,sat)
anova(scores,scoresSZ)
anova(scores,scoresNull)
summary(scores)
tscores = lm(total~expend+ratio+salary+takers,sat)
anova(scores,tscores)
?anova
anova(tscores,scores)
tscores = lm(total~expend+ratio+salary+takers,sat)
anova(tscores,scores)
summary(tscores)
library(gdata)
help(read.xls)
mydata=read.xls("RegularSeasonDetailedResults.xls")
mydata=read.csv("RegularSeasonDetailedResults.xls")
mydata=read.csv("RegularSeasonDetailedResults.csv")
mydata=read.csv("RegularSeasonDetailedResults")
x=getwd()
setwd(x)
mydata=read.csv("RegularSeasonDetailedResults")
x=getwd()+"/Github/BiasedEstimators/"
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators/")
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators/",sep="")
setwd(x)
mydata=read.csv("RegularSeasonDetailedResults.csv")
mydata=read.csv("RegularSeasonDetailedResults.xls")
x=paste(getwd(),"/Github/BiasedEstimators/455Project/",sep="")
setwd(x)
mydata=read.csv("RegularSeasonDetailedResults.xls")
x=paste(getwd(),"/Github/BiasedEstimators/455Project/",sep="")
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators/455Project",sep="")
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators",sep="")
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators/",sep="")
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators/",sep="")
setwd(x)
x=paste(getwd(),"/Github/BiasedEstimators/",sep="")
setwd(x)
mydata=read.csv("C:\Users\alexander\Documents\GitHub\BiasedEstimators\455Project\RegularSeasonDetailedResults.csv")
mydata=read.csv("C:/Users/alexander/Documents/GitHub/BiasedEstimators/455Project/RegularSeasonDetailedResults.csv")
x=paste(getwd(),"/BiasedEstimators/",sep="")
setwd(x)
x=paste(getwd(),"/BiasedEstimators/",sep="")
x=paste(getwd(),"BiasedEstimators/",sep="")
x
x=paste(getwd(),"/455Project",sep="")
x
x=paste(getwd(),"/455Project",sep="")
x=paste(getwd(),"/455Project",sep="")
setwd(x)
mydata=read.csv("RegularSeasonDetailedResults.csv")
idk = mydata$Wscore+Wloc
idk = mydata$Wscore+Wloc
idk = mydata$Wscore$Wloc
idk = mydata$Wscore,Wloc
idk = mydata$(Wscore,Wloc)
nams = mydata.vars()
nams = names(mydata)
nams
nams[0,4]
nams[0:4]
nams[0:4]+names[7:13]
c(nams[0:4],names[7:13])
nams[0:4]+nams[7:13]
c(nams[0:4],nams[7:13])
c(nams[0:4],nams[7:18])
c(nams[0:4],nams[7:20])
c(nams[0:4],nams[7:21])
c(nams[0:4],nams[7:22])
c(nams[0:4],nams[7:21])
c(nams[4:6])
c(nams[5:6],nams[22:])
c(nams[5:6],nams[22:0])
c(nams[5:6],nams[22:30])
c(nams[5:6],nams[22:39])
c(nams[5:6],nams[22:35])
c(nams[5:6],nams[22:33])
c(nams[5:6],nams[22:34])
c(nams[0:1],nams[5:6],nams[22:34])
c(nams[0:2],nams[5:6],nams[22:34])
x=paste(getwd(),"/455Project",sep="")
setwd(x)
mydata=read.csv("RegularSeasonDetailedResults.csv")
nams = names(mydata)
winningCols = c(nams[0:4],nams[7:21])
losingCols = c(nams[0:2],nams[5:6],nams[22:34])
losingCols = c(nams[0:2],nams[5:6],nams[22:34],nams[8])
losingCols = c(nams[0:2],nams[5:6],nams[7:8],nams[22:34])
winningData=mydata[winningCols]
losingData=mydata[losingCols]
winningData$win=c(1)
losingData$win=c(0)
losingData$win
write(winningData,"WinningDataDetailedRegularSeason")
write(winningData,"WinningDataDetailedRegularSeason.csv")
write(winningData,file="WinningDataDetailedRegularSeason.csv")
write.csv(winningData,file="WinningDataDetailedRegularSeason.csv")
write.csv(winningData,file="WinningDataDetailedRegularSeason.csv",row.names=FALSE)
mydata=read.csv("TourneyDetailedResults.csv")
nams = names(mydata)
winningCols = c(nams[0:4],nams[7:21])
losingCols = c(nams[0:2],nams[5:6],nams[7:8],nams[22:34])
winningData=mydata[winningCols]
losingData=mydata[losingCols]
winningData$win=c(1)
losingData$win=c(0)
write.csv(winningData,file="WinningDataDetailedTournament.csv",row.names=FALSE)
write.csv(losingData,file="LosingDataDetailedTournament.csv",row.names=FALSE)
x=paste(getwd(),"/455Project",sep="")
setwd(x)
mydata=read.csv("RegularSeasonDetailedResults.csv")
nams = names(mydata)
winningCols = c(nams[0:4],nams[7:21])
losingCols = c(nams[0:2],nams[5:6],nams[7:8],nams[22:34])
winningData=mydata[winningCols]
losingData=mydata[losingCols]
winningData$win=c(1)
losingData$win=c(0)
write.csv(winningData,file="WinningDataDetailedRegularSeason.csv",row.names=FALSE)
write.csv(losingData,file="LosingDataDetailedRegularSeason.csv",row.names=FALSE)
mydata=read.csv("TourneyDetailedResults.csv")
nams = names(mydata)
winningCols = c(nams[0:4],nams[7:21])
losingCols = c(nams[0:2],nams[5:6],nams[7:8],nams[22:34])
winningData=mydata[winningCols]
losingData=mydata[losingCols]
winningData$win=c(1)
losingData$win=c(0)
write.csv(winningData,file="WinningDataDetailedTournament.csv",row.names=FALSE)
write.csv(losingData,file="LosingDataDetailedTournament.csv",row.names=FALSE)
?T
?T
?t
data(prostate)
names(prostate)
proModel = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45)
proModel = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,prostate)
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=65.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
summary(proModel)
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=65.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=20.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
median(data(prostate)$age)
x = data(prostate)
median(x$age)
x$age
names(x)
prostate
prostate$age
median((prostate)$age)
proModel = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,prostate)
summary(proModel)
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=65.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=20.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
median(prostate$age)
newModel = lm(lpsa~lcavol+lweight+svi,prostate)
predict(newModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=65.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
predict(newModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=20.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
2.3725-.938
2.389-00964
2.389-0.964
3.813-2.389
3.806-2.372354
data(fat)
fatModel = lm(brozek~age+weight+height+abdom,fat)
summary(fatModel)
summary(lm(brozek~fat[1:]))
summary(lm(brozek~fat[,1:]))
summary(lm(brozek~.))
summary(lm(brozek~fat[1:],fat))
summary(lm(brozek~.,fat))
summary(fatModel)
summary(lm(brozek~.,fat))
vals = model.matrix(fatModel)
medians = apply(vals,2,median)
predict(fatModel,new=data.frame(t(medians)))
predict(fatModel,new=data.frame(t(medians)),interval = "prediction")
vals[25:50]
fat[25:50]
fat[[25:50],]
fat[25:50,]
fat[age,weight,height,abdom][25:50,]
fat[c(age,weight,height,abdom)][25:50,]
fat[c(fat$age,weight,height,abdom)][25:50,]
fat[c(fat$age,fat$weight,fat$height,fat$abdom)][25:50,]
smallData = fat[c(fat$age,fat$weight,fat$height,fat$abdom)]
smallData = [c(fat$age,fat$weight,fat$height,fat$abdom)]
smallData = c(fat$age,fat$weight,fat$height,fat$abdom)
smallData[25:50,]
smallData[25:50,]
smallData[25:50,]
smallData = data.frame(fat$age,fat$weight,fat$height,fat$abdom)
smallData[25:50,]
updatedData = smallData[-c(39,41)]
newfatModel = lm(brozek~age+weight+height+abdom,updatedData)
smallData = data.frame(fat$age,fat$weight,fat$height,fat$abdom)
smallData[25:50,]
updatedData = smallData[-c(39,41)]
newfatModel = lm(brozek~age+weight+height+abdom,updatedData)
smallData = data.frame(fat$age,fat$weight,fat$height,fat$abdom)
smallData[25:50,]
updatedData = smallData[-c(39,41),]
newfatModel = lm(brozek~age+weight+height+abdom,updatedData)
newfatModel = lm(brozek~age+weight+height+abdom,updatedData,fat)
smallData = data.frame(fat$age,fat$weight,fat$height,fat$abdom)
smallData[25:50,]
updatedData = smallData[-c(39,41),]
newfatModel = lm(brozek~age+weight+height+abdom,data=updatedData,env=fat)
newfatModel = lm(brozek~age+weight+height+abdom,data=fat)
newfatModel = lm(brozek~age+weight+height+abdom,data=fat[-c(39,41),])
newfatModel = lm(brozek~age+weight+height+abdom,data=fat[-c(39,41),])
vals = model.matrix(newfatModel)
medians = apply(vals,2,median)
predict(newfatModel,new=data.frame(t(medians)),interval = "prediction")
library(ggplot2)
library("faraway", lib.loc="~/R/win-library/3.4")
require(faraway)
data(cheddar)
cheeseMod = lm(taste~Acetic+H2S+Lactic,cheddar)
summary(cheeseMod)
cheeseModP = lm(taste~exp(Acetic)+exp(H2S)+Lactic,cheddar)
summary(cheeseModP)
anova(cheeseMod,cheeseModP)
data(sat)
scores = lm(total~expend+ratio+salary,sat)
scoresSZ = lm(total~expend+ratio,sat)
scoresNull=lm(total~1,sat)
anova(scores,scoresSZ)
anova(scores,scoresNull)
summary(scores)
tscores = lm(total~expend+ratio+salary+takers,sat)
anova(tscores,scores)
summary(tscores)
data(prostate)
proModel = lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,prostate)
summary(proModel)
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=65.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
predict(proModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=20.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
median(prostate$age)
newModel = lm(lpsa~lcavol+lweight+svi,prostate)
predict(newModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=65.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
predict(newModel,new=data.frame(lcavol=1.44692,lweight=3.62301,age=20.00,lbph=0.30010,svi=0.0,lcp=-0.79851,gleason=7.0,pgg45=15),interval="prediction")
data(fat)
fatModel = lm(brozek~age+weight+height+abdom,fat)
summary(fatModel)
summary(lm(brozek~.,fat))
smallData = data.frame(fat$age,fat$weight,fat$height,fat$abdom)
smallData[25:50,]
updatedData = smallData[-c(39,41),]
newfatModel = lm(brozek~age+weight+height+abdom,data=fat[-c(39,41),])
vals = model.matrix(newfatModel)
medians = apply(vals,2,median)
predict(newfatModel,new=data.frame(t(medians)),interval = "prediction")
require(faraway)
vif(fat)
eVals = eigen(t(fat)%*%fat)
fatMatrix = model.matrix(fullFatModel)
fullFatModel = lm(brozek~.,fat)
eVals = eigen(t(fat)%*%fat)
fatMatrix = model.matrix(fullFatModel)
fatMatrix
fatMatrix[,-1]
eVals = eigen(t(fatMatrix)%*%fatMatrix)
eVals
sqrt(eVals$val[1]/eVals$val)
vals = model.matrix(newfatModel)
medians = apply(vals,2,median)
predict(newfatModel,new=data.frame(t(medians)),interval = "prediction")
vif(fat)
fullFatModel = lm(brozek~.,fat)
fatMatrix = model.matrix(fullFatModel)[,-1] #NOTE: this -1 is to remove intercept value of 1
eVals = eigen(t(fatMatrix)%*%fatMatrix)
sqrt(eVals$val[1]/eVals$val)
vif(fat[-c(39,42)])
fullFatModel = lm(brozek~.,fat[-c(39,42)])
fatMatrix = model.matrix(fullFatModel)[,-1] #NOTE: this -1 is to remove intercept value of 1
eVals = eigen(t(fatMatrix)%*%fatMatrix)
sqrt(eVals$val[1]/eVals$val)
adjustedModel = lm(brozek~age+weight+height,fat)
vif(data.frame(fat$age,fat$weight,fat$height))
fatMatrix = model.matrix(adjustedModel)[,-1] #NOTE: this -1 is to remove intercept value of 1
eVals = eigen(t(fatMatrix)%*%fatMatrix)
sqrt(eVals$val[1]/eVals$val)
vals = model.matrix(adjustedModel)
medians = apply(vals,2,median)
medians
medians = apply(vals,2,median)[1:]
medians = apply(vals,2,median)
medians
?apply
adMed = medians[,2:]
adMed = medians[,2:5]
adMed = medians[,2:3]
adMed = medians[,1:3]
adMed = medians[,1:2]
adMed = medians$age
adMed = medians[2:]
adMed = medians[2:3]
adMed
adMed[1:3]
adMed[0:2]
adMed[0:3]
medians[1:3]
medians[2:4]
medians = apply(vals,2,median)[2:4]
medians
edians
predict(adjustedModel,new=data.frame(t(medians)),interval = "prediction")
vals = model.matrix(adjustedModel)
medians = apply(vals,2,median)[2:4]
predict(adjustedModel,new=data.frame(t(medians)),interval = "prediction")
predict(adjustedModel,new=data.frame(age=40,weight=130,height=73),interval = "prediction")
medians
predict(adjustedModel,new=data.frame(age=40,weight=200,height=73),interval = "prediction")
predict(adjustedModel,new=data.frame(age=40,weight=130,height=73),interval = "prediction")
medians
